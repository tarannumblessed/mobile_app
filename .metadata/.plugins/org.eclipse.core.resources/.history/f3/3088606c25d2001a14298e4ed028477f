package com.appsdeveloperblog.app.ws.mobileappws.ui.controller;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.appsdeveloperblog.app.ws.mobileappws.service.AddressService;
import com.appsdeveloperblog.app.ws.mobileappws.service.UserService;
import com.appsdeveloperblog.app.ws.mobileappws.shared.dto.AddressDto;
import com.appsdeveloperblog.app.ws.mobileappws.shared.dto.UserDto;
import com.appsdeveloperblog.app.ws.mobileappws.ui.model.request.UserDetailsRequestModel;
import com.appsdeveloperblog.app.ws.mobileappws.ui.model.response.AddressesRest;
import com.appsdeveloperblog.app.ws.mobileappws.ui.model.response.OperationStatusModel;
import com.appsdeveloperblog.app.ws.mobileappws.ui.model.response.RequestOperationName;
import com.appsdeveloperblog.app.ws.mobileappws.ui.model.response.RequestOperationStatus;
import com.appsdeveloperblog.app.ws.mobileappws.ui.model.response.UserRest;

@RestController
@RequestMapping("users")
public class UserController {
	@Autowired
	private UserService service;

	@Autowired
	private AddressService addressesService;

	@GetMapping(path = "/{id}")
	public UserRest getUser(@PathVariable String id) {
		UserRest returnValue = new UserRest();
		UserDto dto = service.getUserByUserId(id);
		BeanUtils.copyProperties(dto, returnValue);

		return returnValue;
	}

	@PostMapping
	public UserRest createUser(@RequestBody UserDetailsRequestModel userDetails) throws Exception {
		if (userDetails.getFirstName().isEmpty())
			throw new NullPointerException("the object is null");
		UserRest returnValue = new UserRest();

		ModelMapper modelMapper = new ModelMapper();
		UserDto dto = modelMapper.map(userDetails, UserDto.class);

		UserDto user = service.createUser(dto);
		returnValue = modelMapper.map(user, UserRest.class);

		return returnValue;

	}

	@PutMapping(path = "/{id}", consumes = { MediaType.APPLICATION_JSON_VALUE }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public UserRest updateUser(@PathVariable String id, @RequestBody UserDetailsRequestModel userDetials) {
		UserRest returnValue = new UserRest();
		UserDto dto = new UserDto();
		BeanUtils.copyProperties(userDetials, dto);

		UserDto user = service.updateUser(id, dto);
		BeanUtils.copyProperties(user, returnValue);

		return returnValue;
	}

	@DeleteMapping(path = "/{id}", produces = { MediaType.APPLICATION_JSON_VALUE })
	public OperationStatusModel deleteUser(@PathVariable String id) {
		OperationStatusModel returnValue = new OperationStatusModel();
		returnValue.setOperationName(RequestOperationName.DELETE.name());
		service.deleteUser(id);
		returnValue.setOperationStatus(RequestOperationStatus.SUCCESS.name());

		return returnValue;
	}

	@GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)
	public List<UserRest> getUsers(@RequestParam(value = "page", defaultValue = "0") int page,
			@RequestParam(value = "limit", defaultValue = "5") int limit) {
		List<UserRest> returnValue = new ArrayList<>();

		List<UserDto> user = service.getUsers(page, limit);

		for (UserDto dto : user) {
			UserRest userRest = new UserRest();
			BeanUtils.copyProperties(dto, userRest);
			returnValue.add(userRest);
		}

		return returnValue;
	}

	@GetMapping(path = "/{id}/addresses", produces = MediaType.APPLICATION_JSON_VALUE)
	public CollectionModel<AddressesRest> getUserAddresses(@PathVariable String id) {
		List<AddressesRest> returnValue = new ArrayList<>();

		ModelMapper modelMapper = new ModelMapper();

		List<AddressDto> adressesdto = addressesService.getAddress(id);
		if (adressesdto != null & !adressesdto.isEmpty()) {
			java.lang.reflect.Type listType = new TypeToken<List<AddressesRest>>() {
			}.getType();

			returnValue = modelMapper.map(adressesdto, listType);
		}
		Link userLink = WebMvcLinkBuilder.linkTo(UserController.class).slash(id).withRel("user");
		Link selfLink = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class).getUserAddresses(id))
				.withSelfRel();

		return CollectionModel.of(returnValue,userLink,selfLink);
	}

	@GetMapping(path = "/{userId}/addresses/{addressId}", produces = MediaType.APPLICATION_JSON_VALUE)
	public AddressesRest getUserAddress(@PathVariable String addressId, @PathVariable String userId) {

		ModelMapper modelMapper = new ModelMapper();

		AddressDto adressesdto = addressesService.getAddres(addressId);
		Link userLink = WebMvcLinkBuilder.linkTo(UserController.class).slash(userId).withRel("user");
		
		Link addressLink = WebMvcLinkBuilder
				.linkTo(WebMvcLinkBuilder.methodOn(UserController.class).getUserAddresses(userId)).withRel("addresses");
		
		Link selfLink = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(UserController.class).getUserAddress(userId, addressId))
		.withSelfRel();
		AddressesRest returnValue = modelMapper.map(adressesdto, AddressesRest.class);

		returnValue.add(userLink);
		returnValue.add(addressLink);
		returnValue.add(selfLink);
		return returnValue;
	}
}
